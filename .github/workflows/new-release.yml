#
# AppScope - New Release Workflow
#
# Create a new release in GitHub
# Create a new release in Docker hub
# Update the "latest" tag on Docker hub
#
name: New Release
on:
  push:
    tags:
      - '*'

jobs:
  info:
    name: Validate Git Tag
    runs-on: ubuntu-latest
    steps:
      - name: Get Version
        id: version
        uses: Simply007/get-version-action@v2.3.0

      - name: Get Tag
        id: tag
        run: |
          if [ -z "${GITHUB_REF%%refs/tags/v*}" -a "true" = "${{ steps.version.outputs.is-semver }}" ]; then
              echo "tag=${{ steps.version.outputs.version-without-v }}" >> "${GITHUB_OUTPUT}"
          fi

      # Display these for troubleshooting
      - name: Echo Outputs
        run: |
          echo "version=\"${{ steps.version.outputs.version }}\""
          echo "major=\"${{ steps.version.outputs.major }}\""
          echo "minor=\"${{ steps.version.outputs.minor }}\""
          echo "maintenance=\"${{ steps.version.outputs.patch }}\""
          echo "prerelease=\"${{ steps.version.outputs.prerelease }}\""
          echo "build=\"${{ steps.version.outputs.build }}\""
          echo "is-semver=\"${{ steps.version.outputs.is-semver }}\""
          echo "tag=\"${{ steps.tag.outputs.tag }}\""

      - name: Check Tag
        run: |
          if [ "${{ steps.tag.outputs.tag }}" == '' ]; then
              echo "The git version ${{ steps.version.outputs.version }} is not usable..."
              echo "  It must start with a v, and be a valid semantic version"
              exit 1
          fi
          if [ "${{ steps.version.outputs.prerelease }}" != '' ]; then
              echo "The git version ${{ steps.version.outputs.version }} is not usable..."
              echo "  It must not be a prerelease"
              exit 1
          fi

    # Make these available for later stages
    outputs:
      prerelease: ${{ steps.version.outputs.prerelease }}
      tag: ${{ steps.tag.outputs.tag }}


  update-dockerhub-latest:
    name: Update Latest Tag in Dockerhub
    runs-on: ubuntu-latest
    needs: [info,update-cdn-latest]
    steps:
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: scopeci
          password: ${{ secrets.SCOPECI_TOKEN }}

      - name: Setup Crane
        uses: imjasonh/setup-crane@v0.3

      - name: Update the Latest Tag
        run: |
          crane tag cribl/scope:${{ needs.info.outputs.tag }} latest

      - name: Print Digest/Manifest Information
        run: |
          echo "digest and manifest for cribl/scope:${{ needs.info.outputs.tag }}"
          crane digest cribl/scope:${{ needs.info.outputs.tag }}
          crane manifest cribl/scope:${{ needs.info.outputs.tag }} | jq .
          echo "digest and manifest for cribl/scope:latest"
          crane digest cribl/scope:latest
          crane manifest cribl/scope:latest | jq .
