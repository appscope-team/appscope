#!/bin/bash

###################### Definitions ######################

# LogStream will be configured to dump NDJSON output files here.
DEST=/tmp/out/appscope:in_appscope

FAILED_TEST_LIST=""
FAILED_TEST_COUNT=0

starttest(){
    CURRENT_TEST=$1
    echo "=============================================="
    echo "         Testing $CURRENT_TEST"
    echo "=============================================="
    ERR=0
}

endtest(){
    if [ $ERR -eq "0" ]; then
        RESULT=PASSED
    else
        RESULT=FAILED
        FAILED_TEST_LIST+=$CURRENT_TEST
        FAILED_TEST_LIST+=" "
        FAILED_TEST_COUNT=$(($FAILED_TEST_COUNT + 1))
    fi

    echo "******************* $RESULT *******************"
    echo ""
    echo ""
}

wait_for_port() {
    TIMEOUT=${2:-60}
    while ! netstat -an | grep -w ${1} >/dev/null 2>&1; do
        sleep 1
        ((TIMEOUT=TIMEOUT-1))
        if [ $TIMEOUT -le 0 ]; then
            echo >&2 "warn: timed out waiting for port ${1} listener"
            netstat -an | grep -w LISTEN >&2
            return
        fi
    done
    echo 1
}

wait_for_files() {
    TIMEOUT=${2:-60}
    while ! compgen -G "${1}" > /dev/null; do
        sleep 1
        ((TIMEOUT=TIMEOUT-1))
        if [ $TIMEOUT -le 0 ]; then
            echo >&2 "warn: timed out waiting for port ${1} files"
            ls -lRa /tmp/out >&2
            return
        fi
    done
    echo 1
}

###################### Setup ######################

# Start LogStream
# Logstream is setup to dump data sent to that source to NDJSON
# files in ${DEST} named CriblOut-*.json.
[ -z "$(pgrep cribl)" ] || { /opt/cribl/bin/cribl stop; sleep 5; }
[ -d /tmp/out ] && rm -rf /tmp/out
[ -d /tmp/out ] || mkdir /tmp/out
/opt/cribl/bin/cribl start
if [ ! "$(wait_for_port 10090)" ]; then
    echo >&2 "error: LogStream failed to start; aborting test"
    exit 1
fi


###################### Tests ######################

# Scope nginx with a variable worker count
# Use custom scope configuration to send events to a Unix Domain Socket
# Use apache ab to send requests to nginx
# Use scope manager to relay events to logstream
# Assert on number of http events received
relay() {
    starttest "Relay $1 Scope $2 Senders $3 Requests"
    rm -rf ${DEST}
    sed -i "s/worker_processes\ auto/worker_processes\ $1/" /etc/nginx/nginx.conf
    SCOPE_HOME=/opt/test/conf_1 ldscope nginx
    sleep 2
    scope manager -c tcp://localhost:10090 -w $2 -q 1000000 &
    manager_pid=$!
    sleep 2
    ab -n $3 -c 1 http://127.0.0.1/ > /dev/null
    if [ "$(wait_for_files "${DEST}/CriblOut-*.json")" ]; then
        found=$(grep '"source":"http-req"' ${DEST}/CriblOut-*.json | wc -l)
        if [ $found -eq $3 ] ; then 
            echo "PASS: No missing http request events"
        else
            echo "FAIL: Missing http request events: expected: $3, got: $found, dropped: $(($3-found))"
            ERR+=1
        fi
        found=$(grep '"source":"http-resp"' ${DEST}/CriblOut-*.json | wc -l)
        if [ $found -eq $3 ] ; then 
            echo "PASS: No missing http response events"
        else
            echo "FAIL: Missing http response events: expected: $3, got: $found, dropped: $(($3-found))"
            ERR+=1
        fi
    else
        echo "FAIL: no output files"
        ERR+=1
    fi
    kill $manager_pid
    nginx -s quit
    endtest
}

relay 1 1 100
relay 1 10 100
relay 1 1 1000
relay 1 10 1000
relay 1 1 10000
relay 1 10 10000
relay 10 1 100
relay 10 10 100
relay 10 1 1000
relay 10 10 1000
relay 10 1 10000
relay 10 10 10000


###################### Summary ######################

# Results
echo ""
if (( $FAILED_TEST_COUNT == 0 )); then
    echo "************ ALL RELAY TESTS PASSED ************"
else
    echo "************ $FAILED_TEST_COUNT RELAY TESTS FAILED ************"
    echo "Failed tests: $FAILED_TEST_LIST"
fi
echo ""

exit ${FAILED_TEST_COUNT}

